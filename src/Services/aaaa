let checkCart = await db.Cart.findOne({
  where: { cus_id: data.cus_id },
  raw: false,
  nest: true,
});
if (!checkCart) {
  resolve({
    errCode: 1,
    errMessage: "Cann't add to order because cart not found",
  });
} else {
  await db.Order.create({
    fullname: data.fullname,
    email: data.email,
    status: 1,
    Address: data.Address,
    phonenumber: data.phonenumber,
    voucher_id: 1,
    method_id: data.method_id,
    cus_id: data.cus_id,
    paymentstatus: 1,
  }).then(async function (x) {
    if (x.id) {
      let cartitem = data.cartitem;
      let listOrder = [];
      if (cartitem.length > 0) {
        await Promise.all(
          cartitem.map(async (item) => {
            let Cart = await db.Cartitem.findOne({
              where: { id: item },
            });
            let O = [];
            let oo = await Cart.optionvalue;
            await Promise.all(
              oo.map(async (x) => {
                let OP = await db.Option_Product.findOne({
                  where: { id: x, option_id: 1 },
                });
                if (OP) {
                  O.push(x);
                }
              })
            );
            console.log(O);
            let checkAmount = await db.Warehouse_product.findOne({
              where: {
                warehouse_id: data.warehouse_id,
                product_id: Cart.product_id,
                color_id: O,
              },
              raw: false,
              nest: true,
            });
            let warehouse = await db.Warehouse.findOne({
              where: { id: data.warehouse_id },
            });
            let product = await db.Product.findOne({
              where: {
                id: Cart.product_id,
              },
              raw: false,
            });
            if (checkAmount.quantity > Cart.amount) {
              let obj = {};
              obj.order_id = x.id;
              obj.product_id = product.id;
              obj.TotalQuantity = Cart.amount;
              obj.price = Cart.ttprice;
              listOrder.push(obj);
              // checkAmount.quantity = checkAmount.quantity - Cart.amount;
              // console.log("aaaaaaaaaaaa");
              // await checkAmount.save();
            } else {
              resolve({
                errCode: 2,
                errMessage:
                  "Product : " +
                  product.name +
                  " in Warehouse : " +
                  warehouse.name +
                  " Are Not enough quantity ",
              });
            }
          })
        );
        // db.Orderitem.bulkCreate(listOrder);
      }
    }
  });
  resolve({
    errCode: 0,
    errMessage: "Create Order Successfully",
  });
}
