// THEO NAM
let orderFormMonth = (data) => {
  return new Promise(async (resolve, reject) => {
    try {
      let order = await db.Order.findAll({
        attributes: [
          [
            sequelize.fn("DATE_TRUNC", "month", sequelize.col("createdAt")),
            "month",
          ],
          [sequelize.fn("COUNT", "id"), "value"],
        ],
        // where: sequelize.where(
        //   sequelize.fn("date_part", "year", sequelize.col("createdAt")),
        //   data.year
        // ),
        group: [
          sequelize.fn("date_trunc", "month", sequelize.col("createdAt")),
        ],
        order: [
          [
            sequelize.fn("date_trunc", "month", sequelize.col("createdAt")),
            "ASC",
          ],
        ],

        raw: true,
        nest: true,
      });
      if (order.length > 0) {
        order.map((item) => {
          item.month = moment(item.month).format("MMM");
          item.value = +item.value;
          return item;
        });
      }
      resolve({
        errCode: 0,
        errMessage: "Ok",
        order,
      });
    } catch (error) {
      console.log(error);
      reject(error);
    }
  });
};
// OP. BETWEEN
let countOrder = (data) => {
  return new Promise(async (resolve, reject) => {
    try {
      let ordersta4 = await db.Order.count({
        where: { [Op.or]: [{ status: 4 }, { status: 5 }] },
        raw: false,
        nest: true,
      });
      let price = 0;
      let sumorder = await db.Orderitem.findAll({
        include: [
          {
            model: db.Order,
            as: "orderItem",
            where: { [Op.or]: [{ status: 4 }, { status: 5 }] },
          },
        ],

        raw: false,
        nest: true,
      });
      if (sumorder && sumorder.length > 0) {
        await Promise.all(
          sumorder.map(async (x) => {
            price = price + x.TotalPrice;
          })
        );
      }
      let order = await db.Order.count({
        raw: false,
        nest: true,
      });
      let product = await db.Orderitem.count({
        raw: false,
        nest: true,
      });
      //////////----------------COUNT ORDER BY OP BETWEEN
      let ordera = await db.Order.count({
        where: {
          [Op.or]: [
            {
              createdAt: {
                [Op.between]: [data.start, data.end],
              },
            },
          ],
        },
        raw: false,
        nest: true,
      });
      /////--------------COUNT ORDER BY STATUS
      let orderstc = await sequelize.query(
        'SELECT "status", COUNT(code) AS OrderCount FROM "Order" AS "Order" GROUP BY "status" ORDER BY "status";',
        {
          type: sequelize.SELECT,
          raw: false,
          nest: true,
        }
      );
      resolve({
        errCode: 0,
        errMessage: "Ok",
        ordersta4,
        price,
        order,
        product,
        ordera,
        orderstc,
      });
    } catch (error) {
      reject(error);
    }
  });
};
//test query
let testquery = (data) => {
  return new Promise(async (resolve, reject) => {
    try {
      console.log(data);
      let query = await sequelize.query(
        'SELECT COUNT(category_id) FROM "Product" AS "Product" GROUP BY "category_id" ORDER BY "category_id";',
        {
          type: sequelize.SELECT,
          raw: true,
          nest: true,
        }
      );
      let query1 = await db.Product.findAll({
        attributes: [
          [sequelize.col("category_id"), "Category"],
          [Sequelize.fn("COUNT", Sequelize.col("category_id")), "SL"],
        ],
        group: "category_id",
        // order: "category_id",
        raw: true,
        nest: true,
      });
      let query2 = await Object.assign({}, objtest1, objtest2);
      console.log(query2);
      // let list = [];
      // let query3 = await arrayobjts.reduce((r, o) => {
      //   // console.log(r);
      //   // console.log(o);
      //   // console.log(r);
      //   // console.log("R : " + r[0].name);
      //   // list.push(r);
      //   list.push(o);
      // });
      // console.log(list);
      // console.log("Query 3: " + query3);
      resolve({
        errCode: 0,
        errMessage: "Ok",
        query,
        query1,
      });
    } catch (error) {
      reject(error);
    }
  });
};
//
var task = cron.schedule("* 6 * * *", async () => {
  var dateToday = moment(new Date()).format("MM-DD");
  let cus = await db.Customer.findAll({
    where: {
      [Op.and]: [
        db.sequelize.where(
          db.sequelize.cast(db.sequelize.col("Customer.birthday"), "varchar"),
          { [Op.iLike]: `%${dateToday}%` }
        ),
        { isActive: true },
      ],
    },
  });
  if (cus && cus.length > 0) {
    let mailist = [];
    await Promise.all(
      cus.map(async (x) => {
        let ccus = await db.Customer.findOne({
          where: { id: x.id },
          raw: false,
          nest: true,
        });
        let discount = 10;
        let codegif = "PTS" + getRandomInt(10000);
        await db.Voucher.create({
          code: codegif,
          name: "Phú Thắng phiếu giảm giá SINH NHẬT" + ccus.fullname,
          sale: discount,
          expire: null,
          event_id: 1,
          maxuse: 1,
        });
        let obj = {};
        obj.email = ccus.email;
        obj.data = { gifCode: codegif, discoutNumber: discount };
        mailist.push(obj);
      })
    );
    emailService.sendEmailVoucherGif(mailist);
  }
});
